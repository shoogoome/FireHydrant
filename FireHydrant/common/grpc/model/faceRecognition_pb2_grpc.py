# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from model import faceRecognition_pb2 as faceRecognition__pb2


class FaceRecognitionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.is_exists = channel.unary_unary(
        '/faceRecognition.FaceRecognition/is_exists',
        request_serializer=faceRecognition__pb2.faceData.SerializeToString,
        response_deserializer=faceRecognition__pb2.faceData.FromString,
        )
    self.upload_face = channel.unary_unary(
        '/faceRecognition.FaceRecognition/upload_face',
        request_serializer=faceRecognition__pb2.faceData.SerializeToString,
        response_deserializer=faceRecognition__pb2.faceData.FromString,
        )
    self.recognition = channel.unary_unary(
        '/faceRecognition.FaceRecognition/recognition',
        request_serializer=faceRecognition__pb2.faceMessage.SerializeToString,
        response_deserializer=faceRecognition__pb2.faceMessage.FromString,
        )


class FaceRecognitionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def is_exists(self, request, context):
    """人脸是否存在
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def upload_face(self, request, context):
    """上传脸谱
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def recognition(self, request, context):
    """人脸识别
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FaceRecognitionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'is_exists': grpc.unary_unary_rpc_method_handler(
          servicer.is_exists,
          request_deserializer=faceRecognition__pb2.faceData.FromString,
          response_serializer=faceRecognition__pb2.faceData.SerializeToString,
      ),
      'upload_face': grpc.unary_unary_rpc_method_handler(
          servicer.upload_face,
          request_deserializer=faceRecognition__pb2.faceData.FromString,
          response_serializer=faceRecognition__pb2.faceData.SerializeToString,
      ),
      'recognition': grpc.unary_unary_rpc_method_handler(
          servicer.recognition,
          request_deserializer=faceRecognition__pb2.faceMessage.FromString,
          response_serializer=faceRecognition__pb2.faceMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'faceRecognition.FaceRecognition', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
